@{
    ViewBag.Title = "Custom Item Tool";
}

<div class="row">
    <div id="alertError" class="alert alert-danger" role="alert" style="display: none;"></div>
</div>
<div class="row">
    <div class="col-md-6">
        <h4>Item Options</h4>
        <div class="form-group mb-3">
            <label for="ci_inventoryslot" class="form-label">Inventory Slot</label>
            <div class="input-group">
                <select id="ci_inventoryslot" class="form-select">
                    <option value="1">Head</option>
                    <option value="3">Shoulders</option>
                    <option value="4">Shirt</option>
                    <option value="5">Chest</option>
                    <option value="6">Waist</option>
                    <option value="7">Legs</option>
                    <option value="9">Wrists</option>
                    <option value="10">Hands</option>
                    <option value="16">Back</option>
                    <option value="19">Tabard</option>
                </select>
            </div>
        </div>
        <div class="accordion mb-3" id="sectionsaccordion">
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#basicsSection" aria-expanded="true" aria-controls="basicsSection">
                        Geoset Display
                    </button>
                </h2>
                <div id="basicsSection" class="accordion-collapse collapse" data-bs-parent="#inventorySlotSection">
                    <div class="accordion-body">
                        <div id="geosetSection">
                        </div>
                    </div>
                </div>
            </div>
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#texturesSection" aria-expanded="true" aria-controls="texturesSection">
                        Texture Data
                    </button>
                </h2>
                <div id="texturesSection" class="accordion-collapse collapse" data-bs-parent="#sectionsaccordion">
                    <div class="accordion-body">
                        <button type="button" class="btn btn-dark me-3" data-bs-toggle="modal" data-bs-target="#addTextureModal">Add Textures</button>
                    </div>
                </div>
            </div>
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flagsSection" aria-expanded="true" aria-controls="flagsSection">
                        Item Feature Flags
                    </button>
                </h2>
                <div id="flagsSection" class="accordion-collapse collapse" data-bs-parent="#sectionsaccordion">
                    <div class="accordion-body">
                    </div>
                </div>
            </div>
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#component1ModelsSection" aria-expanded="true" aria-controls="component1ModelsSection">
                        Component 1 Models
                    </button>
                </h2>
                <div id="component1ModelsSection" class="accordion-collapse collapse" data-bs-parent="#sectionsaccordion">
                    <div class="accordion-body">
                        <button id="component1AddModelBtn" type="button" class="btn btn-dark me-3" data-bs-toggle="modal" data-bs-target="#addComponentModelModal">Add Model</button>
                        <button id="component1RandomizeModelBtn" type='button' class='btn btn-secondary me-3'>Randomize</button>
                    </div>
                </div>
            </div>
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#component1TexturesSection" aria-expanded="true" aria-controls="component1TexturesSection">
                        Component 1 Texture
                    </button>
                </h2>
                <div id="component1TexturesSection" class="accordion-collapse collapse" data-bs-parent="#sectionsaccordion">
                    <div class="accordion-body">
                        <button id="component1AddTextureBtn" class="btn btn-dark me-3" data-bs-toggle="modal" data-bs-target="#addComponentTextureModal">Add Texture</button>
                        <button id="component1RandomizeTextureBtn" type='button' class='btn btn-secondary me-3'>Randomize</button>
                    </div>
                </div>
            </div>
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#component2ModelsSection" aria-expanded="true" aria-controls="component2ModelsSection">
                        Component 2 Models
                    </button>
                </h2>
                <div id="component2ModelsSection" class="accordion-collapse collapse" data-bs-parent="#sectionsaccordion">
                    <div class="accordion-body">
                        <button id="component2AddModelBtn" type="button" class="btn btn-dark me-3" data-bs-toggle="modal" data-bs-target="#addComponentModelModal">Add Model</button>
                        <button id="component2RandomizeModelBtn" type='button' class='btn btn-secondary me-3'>Randomize</button>
                    </div>
                </div>
            </div>
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#component2TexturesSection" aria-expanded="true" aria-controls="component2TexturesSection">
                        Component 2 Texture
                    </button>
                </h2>
                <div id="component2TexturesSection" class="accordion-collapse collapse" data-bs-parent="#sectionsaccordion">
                    <div class="accordion-body">
                        <button id="component2AddTextureBtn" class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#addComponentTextureModal">Add Texture</button>
                        <button id="component2RandomizeTextureBtn" type='button' class='btn btn-secondary me-3'>Randomize</button>
                    </div>
                </div>
            </div>
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#particleColorSection" aria-expanded="true" aria-controls="particleColorSection">
                        Particle Colors Override
                    </button>
                </h2>
                <div id="particleColorSection" class="accordion-collapse collapse" data-bs-parent="#sectionsaccordion">
                    <div class="accordion-body">
                        <button class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#setParticleOverrideModal">Set Particle Colors</button>
                    </div>
                </div>
            </div>
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#geoSetOverrideSection1" aria-expanded="true" aria-controls="geoSetOverrideSection1">
                        Helmet Geoset Overrides - Male
                    </button>
                </h2>
                <div id="geoSetOverrideSection1" class="accordion-collapse collapse" data-bs-parent="#sectionsaccordion">
                    <div class="accordion-body">
                        <button id="addGsOverrideM" class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#addGeosetOverrideModal">Add Geoset Override</button>
                    </div>
                </div>
            </div>
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#geoSetOverrideSection2" aria-expanded="true" aria-controls="geoSetOverrideSection2">
                        Helmet Geoset Overrides - Female
                    </button>
                </h2>
                <div id="geoSetOverrideSection2" class="accordion-collapse collapse" data-bs-parent="#sectionsaccordion">
                    <div class="accordion-body">
                        <button id="addGsOverrideF" class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#addGeosetOverrideModal">Add Geoset Override</button>
                    </div>
                </div>
            </div>
        </div>
        <h4>Import Options</h4>
        <div class="d-flex mb-3">
            <button type="button" class="btn btn-secondary me-3" data-bs-toggle="modal" data-bs-target="#loadItemModal">Load From Item</button>
            <button id="loadFileBtn" type="button" class="btn btn-secondary">Load From File</button>
        </div>
    </div>
    <div class="col-md-6">
        <h4>Character Preview</h4>
        <div class="list-group">
            <div class="list-group-item list-group-item-secondary">
                <div id="model_3d"></div>
            </div>
            <div class="form-group mb-3">
                <label for="ci_model_race" class="form-label">Race</label>
                <div class="input-group">
                    <select id="ci_model_race" class="form-select" value="11">
                        <option value="1">Human</option>
                        <option value="2">Orc</option>
                        <option value="3">Dwarf</option>
                        <option value="4">Night Elf</option>
                        <option value="5">Undead</option>
                        <option value="6">Tauren</option>
                        <option value="7">Gnome</option>
                        <option value="8">Troll</option>
                        <option value="10">Blood Elf</option>
                        <option value="11">Draenei</option>
                        <option value="22">Worgen</option>
                        <option value="24">Pandaren</option>
                        <option value="27">Nightborne</option>
                        <option value="28">Highmountain Tauren</option>
                        <option value="29">Void Elf</option>
                        <option value="30">Lightforged Draenei</option>
                        <option value="31">Zandalari Troll</option>
                        <option value="32">Kul Tiran</option>
                        <option value="34">Dark Iron Dwarf</option>
                        <option value="35">Vulpera</option>
                        <option value="36">Mag'har Orc</option>
                        <option value="37">Mechagnome</option>
                    </select>
                </div>
            </div>
            <div class="form-group mb-3">
                <label for="ci_model_gender" class="form-label">Model Gender</label>
                <div class="input-group">
                    <select id="ci_model_gender" class="form-select" value="1">
                        <option value="0">Male</option>
                        <option value="1">Female</option>
                    </select>
                </div>
            </div>
        </div>
        <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#loadCharacterModal">Load Character</button>

    </div>
</div>
<hr />
<div class="row">
    <div class="col align-self-end">
        <button id="randomizeItemBtn" type="button" class="btn btn-warning me-3">Randomize Item</button>
        <button id="exportBtn" type="button" class="btn btn-dark">Export Item</button>
    </div>
</div>

<div class="modal fade" id="addTextureModal" tabindex="-1" aria-labelledby="addTextureModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="addTextureModalLabel">Add Texture</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3">
                    <label for="ci_texture_componentsection" class="form-label">Component Section</label>
                    <div class="input-group">
                        <select id="ci_texture_componentsection" class="form-select">
                            <option value="0">Upper Arm</option>
                            <option value="1">Lower Arm</option>
                            <option value="2">Hand</option>
                            <option value="3">Upper Torso</option>
                            <option value="4">Lower Torso</option>
                            <option value="5">Upper Leg</option>
                            <option value="6">Lower Leg</option>
                            <option value="7">Foot</option>
                            <option value="8">Accesory</option>
                        </select>
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label for="ci_texture_textureFile" class="form-label">Texture File</label>
                    <div class="dropdown-menu d-block position-static pt-0 mx-0 rounded-3 shadow overflow-hidden">
                        <div class="p-2 mb-2 bg-body-tertiary border-bottom">
                            <input id="ci_texture_textureFile" type="search" class="form-control" autocomplete="false" placeholder="Search for a texture file...">
                        </div>
                        <ul id="ci_texture_textureResults" class="list-unstyled mb-0">
                        </ul>
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label for="ci_texture_gender" class="form-label">Apply Texture to Gender(s)</label>
                    <div class="input-group">
                        <select id="ci_texture_gender" class="form-select">
                            <option value="3">All</option>
                            <option value="0">Male</option>
                            <option value="1">Female</option>
                        </select>
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label for="ci_texture_race" class="form-label">Apply Texture to Race(s)</label>
                    <div class="input-group">
                        <select id="ci_texture_race" class="form-select">
                            <option value="0">All</option>
                            <option value="1">Human</option>
                            <option value="2">Orc</option>
                            <option value="3">Dwarf</option>
                            <option value="4">Night Elf</option>
                            <option value="5">Undead</option>
                            <option value="6">Tauren</option>
                            <option value="7">Gnome</option>
                            <option value="8">Troll</option>
                            <option value="10">Blood Elf</option>
                            <option value="11">Draenei</option>
                            <option value="22">Worgen</option>
                            <option value="24">Pandaren</option>
                            <option value="27">Nightborne</option>
                            <option value="28">Highmountain Tauren</option>
                            <option value="29">Void Elf</option>
                            <option value="30">Lightforged Draenei</option>
                            <option value="31">Zandalari Troll</option>
                            <option value="32">Kul Tiran</option>
                            <option value="34">Dark Iron Dwarf</option>
                            <option value="35">Vulpera</option>
                            <option value="36">Mag'har Orc</option>
                            <option value="37">Mechagnome</option>
                        </select>
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label for="ci_texture_class" class="form-label">Apply Texture to Class(es)</label>
                    <div class="input-group">
                        <select id="ci_texture_class" class="form-select">
                            <option value="0">All</option>
                            <option value="1">Warrior</option>
                            <option value="2">Paladin</option>
                            <option value="3">Hunter</option>
                            <option value="4">Rogue</option>
                            <option value="5">Priest</option>
                            <option value="6">Death Knight</option>
                            <option value="7">Shaman</option>
                            <option value="8">Mage</option>
                            <option value="9">Warlock</option>
                            <option value="10">Monk</option>
                            <option value="11">Druid</option>
                            <option value="12">Demon Hunter</option>
                        </select>
                    </div>
                </div>
                <input id="ci_texture_fileId" type="hidden" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button id="addTextureBtn" type="button" class="btn btn-primary" data-bs-dismiss="modal" disabled>Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="loadItemModal" tabindex="-1" aria-labelledby="loadItemModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="loadItemModalLabel">Load Item</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3">
                    <label for="ci_item_search" class="form-label">Item</label>
                    <div class="dropdown-menu d-block position-static pt-0 mx-0 rounded-3 shadow overflow-hidden">
                        <div class="p-2 mb-2 bg-body-tertiary border-bottom">
                            <input id="ci_item_search" type="search" class="form-control" autocomplete="false" placeholder="Search for an item by name or id...">
                        </div>
                        <ul id="ci_item_searchResults" class="list-unstyled mb-0">
                        </ul>
                    </div>
                </div>
                <input id="ci_item_displayId" type="hidden" />
                <input id="ci_item_inventoryType" type="hidden" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button id="loadItemBtn" type="button" class="btn btn-primary" data-bs-dismiss="modal" disabled>Load item</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addComponentModelModal" tabindex="-1" aria-labelledby="addComponentModelModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="addComponentModelModalLabel">Add Component Model</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3">
                    <label for="ci_componentmodel_modelfile" class="form-label">Model File</label>
                    <div class="dropdown-menu d-block position-static pt-0 mx-0 rounded-3 shadow overflow-hidden">
                        <div class="p-2 mb-2 bg-body-tertiary border-bottom">
                            <input id="ci_componentmodel_modelfile" type="search" class="form-control" autocomplete="false" placeholder="Search for a model file...">
                        </div>
                        <ul id="ci_componentmodel_searchResults" class="list-unstyled mb-0">
                        </ul>
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label for="ci_componentmodel_extraData" class="form-label">Shoulderpad Options</label>
                    <div class="input-group">
                        <select id="ci_componentmodel_extraData" class="form-select">
                            <option value="-1">Model is not a shoulder pad</option>
                            <option value="0">Model is Left Shoulderpad</option>
                            <option value="1">Model is Right Shoulderpad</option>
                        </select>
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label for="ci_componentmodel_gender" class="form-label">Apply Model to Gender(s)</label>
                    <div class="input-group">
                        <select id="ci_componentmodel_gender" class="form-select">
                            <option value="3">All</option>
                            <option value="0">Male</option>
                            <option value="1">Female</option>
                        </select>
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label for="ci_componentmodel_race" class="form-label">Apply Model to Race(s)</label>
                    <div class="input-group">
                        <select id="ci_componentmodel_race" class="form-select">
                            <option value="0">All</option>
                            <option value="1">Human</option>
                            <option value="2">Orc</option>
                            <option value="3">Dwarf</option>
                            <option value="4">Night Elf</option>
                            <option value="5">Undead</option>
                            <option value="6">Tauren</option>
                            <option value="7">Gnome</option>
                            <option value="8">Troll</option>
                            <option value="10">Blood Elf</option>
                            <option value="11">Draenei</option>
                            <option value="22">Worgen</option>
                            <option value="24">Pandaren</option>
                            <option value="27">Nightborne</option>
                            <option value="28">Highmountain Tauren</option>
                            <option value="29">Void Elf</option>
                            <option value="30">Lightforged Draenei</option>
                            <option value="31">Zandalari Troll</option>
                            <option value="32">Kul Tiran</option>
                            <option value="34">Dark Iron Dwarf</option>
                            <option value="35">Vulpera</option>
                            <option value="36">Mag'har Orc</option>
                            <option value="37">Mechagnome</option>
                        </select>
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label for="ci_componentmodel_class" class="form-label">Apply Model to Class(es)</label>
                    <div class="input-group">
                        <select id="ci_componentmodel_class" class="form-select">
                            <option value="0">All</option>
                            <option value="1">Warrior</option>
                            <option value="2">Paladin</option>
                            <option value="3">Hunter</option>
                            <option value="4">Rogue</option>
                            <option value="5">Priest</option>
                            <option value="6">Death Knight</option>
                            <option value="7">Shaman</option>
                            <option value="8">Mage</option>
                            <option value="9">Warlock</option>
                            <option value="10">Monk</option>
                            <option value="11">Druid</option>
                            <option value="12">Demon Hunter</option>
                        </select>
                    </div>
                </div>
                <input id="ci_componentmodel_fileId" type="hidden" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button id="addComponentModelBtn" type="button" class="btn btn-primary" data-bs-dismiss="modal" disabled>Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addComponentTextureModal" tabindex="-1" aria-labelledby="addComponentTextureModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="addComponentTextureModalLabel">Add Component Texture</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3">
                    <label for="ci_componenttexture_file" class="form-label">Texture File</label>
                    <div class="dropdown-menu d-block position-static pt-0 mx-0 rounded-3 shadow overflow-hidden">
                        <div class="p-2 mb-2 bg-body-tertiary border-bottom">
                            <input id="ci_componenttexture_file" type="search" class="form-control" autocomplete="false" placeholder="Search for a texture file...">
                        </div>
                        <ul id="ci_componenttexture_searchResults" class="list-unstyled mb-0">
                        </ul>
                    </div>
                </div>
                <input id="ci_componenttexture_fileId" type="hidden" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button id="addComponentTextureBtn" type="button" class="btn btn-primary" data-bs-dismiss="modal" disabled>Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="setParticleOverrideModal" tabindex="-1" aria-labelledby="setParticleOverrideModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="setParticleOverrideModalLabel">Set Particle Colors </h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3">
                    <label for="ci_componentmodel_extraData" class="form-label">Particle 1 Colors & Alphas</label>
                    <div class="input-group">
                        <input id="ci_particle_color1_1" type="color" class="form-control form-control-color" autocomplete="false">
                        <input id="ci_particle_alpha1_1" type="number" min="0" max="1" step="0.01" class="form-control" value="1" autocomplete="false">
                        <input id="ci_particle_color1_2" type="color" class="form-control form-control-color" autocomplete="false">
                        <input id="ci_particle_alpha1_2" type="number" min="0" max="1" step="0.01" class="form-control" value="1" autocomplete="false">
                        <input id="ci_particle_color1_3" type="color" class="form-control form-control-color" autocomplete="false">
                        <input id="ci_particle_alpha1_3" type="number" min="0" max="1" step="0.01" class="form-control" value="1" autocomplete="false">
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label for="ci_componentmodel_extraData" class="form-label">Particle 2 Colors & Alphas</label>
                    <div class="input-group">
                        <input id="ci_particle_color2_1" type="color" class="form-control form-control-color" autocomplete="false">
                        <input id="ci_particle_alpha2_1" type="number" min="0" max="1" step="0.01" class="form-control" value="1" autocomplete="false">
                        <input id="ci_particle_color2_2" type="color" class="form-control form-control-color" autocomplete="false">
                        <input id="ci_particle_alpha2_2" type="number" min="0" max="1" step="0.01" class="form-control" value="1" autocomplete="false">
                        <input id="ci_particle_color2_3" type="color" class="form-control form-control-color" autocomplete="false">
                        <input id="ci_particle_alpha2_3" type="number" min="0" max="1" step="0.01" class="form-control" value="1" autocomplete="false">
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label for="ci_componentmodel_extraData" class="form-label">Particle 3 Colors & Alphas</label>
                    <div class="input-group">
                        <input id="ci_particle_color3_1" type="color" class="form-control form-control-color" autocomplete="false">
                        <input id="ci_particle_alpha3_1" type="number" min="0" max="1" step="0.01" class="form-control" value="1" autocomplete="false">
                        <input id="ci_particle_color3_2" type="color" class="form-control form-control-color" autocomplete="false">
                        <input id="ci_particle_alpha3_2" type="number" min="0" max="1" step="0.01" class="form-control" value="1" autocomplete="false">
                        <input id="ci_particle_color3_3" type="color" class="form-control form-control-color" autocomplete="false">
                        <input id="ci_particle_alpha3_3" type="number" min="0" max="1" step="0.01" class="form-control" value="1" autocomplete="false">
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button id="setParticleOverride" type="button" class="btn btn-primary" data-bs-dismiss="modal">Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addGeosetOverrideModal" tabindex="-1" aria-labelledby="addGeosetOverrideModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="addGeosetOverrideModalLabel">Add Geoset Override</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3">
                    <label for="ci_helmetgeovis_geosetgroup" class="form-label">Geoset Group</label>
                    <div class="input-group">
                        <select id="ci_helmetgeovis_geosetgroup" class="form-select">
                        </select>
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label for="ci_helmetgeovis_race" class="form-label">Apply for Race</label>
                    <div class="input-group">
                        <select id="ci_helmetgeovis_race" class="form-select">
                            <option value="1">Human</option>
                            <option value="2">Orc</option>
                            <option value="3">Dwarf</option>
                            <option value="4">Night Elf</option>
                            <option value="5">Undead</option>
                            <option value="6">Tauren</option>
                            <option value="7">Gnome</option>
                            <option value="8">Troll</option>
                            <option value="10">Blood Elf</option>
                            <option value="11">Draenei</option>
                            <option value="22">Worgen</option>
                            <option value="24">Pandaren</option>
                            <option value="27">Nightborne</option>
                            <option value="28">Highmountain Tauren</option>
                            <option value="29">Void Elf</option>
                            <option value="30">Lightforged Draenei</option>
                            <option value="31">Zandalari Troll</option>
                            <option value="32">Kul Tiran</option>
                            <option value="34">Dark Iron Dwarf</option>
                            <option value="35">Vulpera</option>
                            <option value="36">Mag'har Orc</option>
                            <option value="37">Mechagnome</option>
                        </select>
                    </div>
                </div>
            </div>
            <input id="ci_helmetgeovis_gender" type="hidden" />
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button id="addHelmetGeoVis" type="button" class="btn btn-primary" data-bs-dismiss="modal">Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="loadCharacterModal" tabindex="-1" aria-labelledby="loadCharacterModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="loadCharacterModalLabel">Load Character</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3">
                    <label for="ci_character_select" class="form-label">Character to load</label>
                    <div class="input-group">
                        <select id="ci_character_select" class="form-select">
                        </select>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button id="loadCharacterBtn" type="button" class="btn btn-primary" data-bs-dismiss="modal">Load Character</button>
            </div>
        </div>
    </div>
</div>


<input id="ci_component_id" type="hidden" />

@section scripts
{
    <script type="text/javascript" src="~/modelviewer/live/viewer/viewer.min.js"></script>
    <script type="text/javascript" src="~/js/wow-model-viewer.js"></script>
    <script type="text/javascript">
        function debounce(func) {
            let timer;
            return (...args) => {
                clearTimeout(timer);
                timer = setTimeout(() => { func.apply(this, args); }, 250);
            };
        }

        const character = {
            "race": 11,
            "gender": 1,
            "customizations": [
                ({ optionId: 133, choiceId: 1959 }),
                ({ optionId: 134, choiceId: 1963 }),
                ({ optionId: 135, choiceId: 1983 }),
                ({ optionId: 136, choiceId: 2000 }),
                ({ optionId: 137, choiceId: 2011 }),
                ({ optionId: 619, choiceId: 6978 }),
                ({ optionId: 689, choiceId: 7703 }),
                ({ optionId: 697, choiceId: 7764 }),
                ({ optionId: 699, choiceId: 7791 }),
                ({ optionId: 701, choiceId: 7796 }),
                ({ optionId: 778, choiceId: 8643 })
            ]
        };
        let itemMaterials = {}
        let itemComponentModels = {
            "0": {
                texture: {
                    id: -1,
                    name: ""
                },
                models: []
            },
            "1": {
                texture: {
                    id: -1,
                    name: ""
                },
                models: []
            }
        };
        let particleColors = [];
        let helmetGeoVisMale = [];
        let helmetGeoVisFemale = [];
        let flags = 0;
        let characters = [];

        function onSearchTexture() {
            $.ajax({
                url: "/Data/TextureFiles?search=" + $("#ci_texture_textureFile").val(),
                method: "GET",
                success: function (data) {
                    $("#ci_texture_textureResults").empty();
                    for (const texture of data) {
                        const itemElem = $(" <a class='dropdown-item d-flex align-items-center gap-2 py-2' href='#'>")
                        itemElem.text(texture.FileName);
                        itemElem.on("click", function () {
                            $("#ci_texture_textureFile").val(texture.FileName);
                            $("#ci_texture_fileId").val(texture.Id);
                            $("#ci_texture_textureResults").empty();
                            $("#addTextureBtn").removeAttr('disabled');
                        });
                        const li = $("<li>");
                        li.append(itemElem);
                        $("#ci_texture_textureResults").append(li);
                    }
                }
            });
        }

        function onSearchItem() {
            $.ajax({
                url: "/Data/ItemDisplayData?search=" + $("#ci_item_search").val(),
                method: "GET",
                success: function (data) {
                    $("#ci_item_searchResults").empty();
                    for (const item of data) {
                        const itemElem = $(" <a class='dropdown-item d-flex align-items-center gap-2 py-2' href='#'>")
                        itemElem.text(item.ItemName);
                        itemElem.on("click", function () {
                            $("#ci_item_search").val(item.ItemName);
                            $("#ci_item_displayId").val(item.DisplayId);
                            $("#ci_item_inventoryType").val(item.InventoryType);

                            $("#ci_item_searchResults").empty();
                            $("#loadItemBtn").removeAttr('disabled');
                        });
                        const li = $("<li>");
                        li.append(itemElem);
                        $("#ci_item_searchResults").append(li);
                    }
                }
            });
        }

        function onSearchComponentModel() {
            $.ajax({
                url: "/Data/ComponentModels?search=" + $("#ci_componentmodel_modelfile").val(),
                method: "GET",
                success: function (data) {
                    $("#ci_componentmodel_searchResults").empty();
                    for (const item of data) {
                        const itemElem = $(" <a class='dropdown-item d-flex align-items-center gap-2 py-2' href='#'>")
                        itemElem.text(item.FileName);
                        itemElem.on("click", function () {
                            $("#ci_componentmodel_modelfile").val(item.FileName);
                            $("#ci_componentmodel_fileId").val(item.Id);

                            $("#ci_componentmodel_searchResults").empty();
                            $("#addComponentModelBtn").removeAttr('disabled');
                        });
                        const li = $("<li>");
                        li.append(itemElem);
                        $("#ci_componentmodel_searchResults").append(li);
                    }
                }
            });
        }

        function onSearchComponentTexture() {
            $.ajax({
                url: "/Data/TextureFiles?search=" + $("#ci_componenttexture_file").val(),
                method: "GET",
                success: function (data) {
                    $("#ci_componenttexture_searchResults").empty();
                    for (const texture of data) {
                        const itemElem = $(" <a class='dropdown-item d-flex align-items-center gap-2 py-2' href='#'>")
                        itemElem.text(texture.FileName);
                        itemElem.on("click", function () {
                            $("#ci_componenttexture_file").val(texture.FileName);
                            $("#ci_componenttexture_fileId").val(texture.Id);
                            $("#ci_componenttexture_searchResults").empty();
                            $("#addComponentTextureBtn").removeAttr('disabled');
                        });
                        const li = $("<li>");
                        li.append(itemElem);
                        $("#ci_componenttexture_searchResults").append(li);
                    }
                }
            });
        }

        function onInventorySlotChange() {
            itemMaterials = {};
            let inventorySlot = parseInt($("#ci_inventoryslot").val(), 10);
            $("#geosetSection").empty();

            let geoSets = getGeoSetsForInventoryType(inventorySlot);
            for (const set of geoSets) {
                const geoSetData = WH.Wow.GeoSets[set];
                const formGroup = $("<div class='form-group mb-3' />");
                formGroup.append($("<label for='ci_geoset_" + set + "' class='form-label'>" + geoSetData.title + "</label>"));
                const inputGroup = $("<div class='input-group' />");
                const select = $("<select id='ci_geoset_" + set + "' class='form-select' />");
                for (const opt of geoSetData.options) {
                    select.append("<option value='" + opt.value + "'>" + opt.name + "</option>");
                }
                select.on('change', function () {
                    previewCustomItem();
                })
                inputGroup.append(select);
                formGroup.append(inputGroup);
                $("#geosetSection").append(formGroup);
            }

            const randomizeButton = $("<button type='button' class='btn btn-secondary me-3'>Randomize</button>");
            randomizeButton.on("click", onRandomizeGeosetData);
            $("#geosetSection").append(randomizeButton);


            if (inventorySlot === WH.Wow.Item.INVENTORY_TYPE_HEAD) {
                $("#geoSetOverrideSection1").parent().show();
                $("#geoSetOverrideSection2").parent().show();
            } else {
                $("#geoSetOverrideSection1").parent().hide();
                $("#geoSetOverrideSection2").parent().hide();
            }

            reloadTexturesComponents();
            if (window.model) {
                previewCustomItem();
            }
        }

        function onAddTexture() {
            const section = parseInt($("#ci_texture_componentsection").val(), 10);
            const textureData = {
                fileName: $("#ci_texture_textureFile").val(),
                fileId: parseInt($("#ci_texture_fileId").val(), 10),
                gender: parseInt($("#ci_texture_gender").val(), 10),
                race: parseInt($("#ci_texture_race").val(), 10),
                class: parseInt($("#ci_texture_class").val(), 10),
            };
            if (itemMaterials[section]) {
                itemMaterials[section].push(textureData);
            } else {
                itemMaterials[section] = [textureData];
            }
            reloadTexturesComponents();
            previewCustomItem();
        }

        function onAddComponentModel() {
            const componentId = $("#ci_component_id").val();
            const modelData = {
                fileName: $("#ci_componentmodel_modelfile").val(),
                fileId: parseInt($("#ci_componentmodel_fileId").val(), 10),
                gender: parseInt($("#ci_componentmodel_gender").val(), 10),
                race: parseInt($("#ci_componentmodel_race").val(), 10),
                class: parseInt($("#ci_componentmodel_class").val(), 10),
                extraData: parseInt($("#ci_componentmodel_extraData").val(), 10)
            };
            itemComponentModels[componentId].models.push(modelData);
            reloadComponentModelsComponents();
            previewCustomItem();
        }

        function onAddComponentTexture() {
            const componentId = $("#ci_component_id").val();
            const textureData = {
                name: $("#ci_componenttexture_file").val(),
                id: parseInt($("#ci_componenttexture_fileId").val(), 10)
            };
            itemComponentModels[componentId].texture = textureData;
            reloadComponentModelsComponents();
            previewCustomItem();
        }

        function onAddGeoSetOverride() {
            const overridedata = {
                group: parseInt($("#ci_helmetgeovis_geosetgroup").val(), 10),
                race: parseInt($("#ci_helmetgeovis_race").val(), 10),
            }
            if ($("#ci_helmetgeovis_gender").val() === "0") {
                helmetGeoVisMale.push(overridedata);
            } else {
                helmetGeoVisFemale.push(overridedata);
            }
            reloadHelmetGeovisComponents();
            previewCustomItem();
        }

        function onSetParticleColors() {
            particleColors = [];
            for (let i = 1; i < 4; i++) {
                const colors = [];
                for (let j = 1; j < 4; j++) {
                    let colorVal = $("#ci_particle_color" + i + "_" + j).val();
                    let a = Math.floor(parseFloat($("#ci_particle_alpha" + i + "_" + j).val()) * 255);
                    let r = parseInt(colorVal.substr(1, 2), 16);
                    let g = parseInt(colorVal.substr(3, 2), 16);
                    let b = parseInt(colorVal.substr(5, 2), 16);
                    colors.push(rgbaToInt(r, g, b, a));
                }
                particleColors.push(colors);
            }
            reloadParticleColorComponents();
            previewCustomItem();
        }

        function onModelRaceChange() {
            character.race = parseInt($("#ci_model_race").val(), 10);
            character.customizations = [];
            reloadCharacterModel();
        }

        function onModelGenderChange() {
            character.gender = parseInt($("#ci_model_gender").val(), 10);
            character.customizations = [];
            reloadCharacterModel();
        }

        function onLoadCharacter() {
            const index = parseInt($("#ci_character_select").val(), 10);
            const char = characters[index];


            $.LoadingOverlay("show");
            $.ajax({
                method: "GET",
                url: "/Character/CharacterCustomizations?characterId=" + char.Id,
                success: function (data) {
                    character.gender = char.Gender;
                    character.race = char.Race;

                    $("#ci_model_gender").val(character.gender);
                    $("#ci_model_race").val(character.race);

                    character.customizations = data.map(c => ({
                        optionId: c.CustomizationOptionId,
                        choiceId: c.CustomizationChoiceId
                    }));
                    reloadCharacterModel();
                    $.LoadingOverlay("hide");
                }
            });
        }

        function onRandomizeItem() {
            // const inventorySlots = [1, 3, 4, 5, 6, 7, 9, 10, 16, 19];
            // const inventorySlot = inventorySlots[Math.floor(Math.random() * inventorySlots.length)];
            // $("#ci_inventoryslot").val(inventorySlot);
            // onInventorySlotChange();

            onRandomizeGeosetData();
            $.LoadingOverlay("show");
            let promises = [];
            const texturePromises = randomizeTextures();
            promises = promises.concat(texturePromises);
            promises = promises.concat(randomizeComponentModel("0"));
            promises = promises.concat(randomizeComponentModel("1"));
            promises = promises.concat(randomizeComponentTexture("0"));
            promises = promises.concat(randomizeComponentTexture("1"));
            Promise.all(promises).then(function () {
                reloadTexturesComponents();
                reloadComponentModelsComponents();
                previewCustomItem();
                $.LoadingOverlay("hide");
            })
        }

        function onRandomizeGeosetData() {
            let inventorySlot = parseInt($("#ci_inventoryslot").val(), 10);
            let geoSets = getGeoSetsForInventoryType(inventorySlot);
            for (const set of geoSets) {
                const geoSetData = WH.Wow.GeoSets[set];
                const option = geoSetData.options[Math.floor(Math.random() * geoSetData.options.length)];
                $("#ci_geoset_" + set).val(option.value);
            }
            previewCustomItem();
        }

        function onRandomizeTextures() {
            $.LoadingOverlay("show");
            Promise.all(randomizeTextures()).then(function () {
                reloadTexturesComponents();
                previewCustomItem();
                $.LoadingOverlay("hide");
            })
        }

        function onRandomizeComponent1Model() {
            $.LoadingOverlay("show");
            Promise.all(randomizeComponentModel("0")).then(function () {
                reloadComponentModelsComponents();
                previewCustomItem();
                $.LoadingOverlay("hide");
            })
        }

        function onRandomizeComponent1Texture() {
            $.LoadingOverlay("show");
            Promise.all(randomizeComponentTexture("0")).then(function () {
                reloadComponentModelsComponents();
                previewCustomItem();
                $.LoadingOverlay("hide");
            })
        }

        function onRandomizeComponent2Model() {
            $.LoadingOverlay("show");
            Promise.all(randomizeComponentModel("1")).then(function () {
                reloadComponentModelsComponents();
                previewCustomItem();
                $.LoadingOverlay("hide");
            })
        }

        function onRandomizeComponent2Texture() {
            $.LoadingOverlay("show");
            Promise.all(randomizeComponentTexture("1")).then(function () {
                reloadComponentModelsComponents();
                previewCustomItem();
                $.LoadingOverlay("hide");
            })
        }

        function randomizeTextures() {
            const inventorySlot = parseInt($("#ci_inventoryslot").val(), 10);
            const sections = getComponentSectionsForInventoryType(inventorySlot);
            const promises = [];
            for (const section of sections) {
                promises.push($.ajax({
                    method: "GET",
                    url: "/Data/RandomTextureFile",
                    success: function (data) {
                        itemMaterials[section] = [{
                            fileName: data.FileName,
                            fileId: data.Id,
                            gender: 3,
                            race: 0,
                            class: 0
                        }]
                    }
                }));
            }
            return promises;
        }

        function randomizeComponentModel(slot) {
            const inventorySlot = parseInt($("#ci_inventoryslot").val(), 10);
            const promises = [];
            let loops = 1;
            if (inventorySlot === window.WH.Wow.Item.INVENTORY_TYPE_SHOULDERS) {
                loops = 2;
            }
            for (let i = 0; i < loops; i++) {
                const promise = $.ajax({
                    method: "GET",
                    url: "/Data/RandomComponentModel",
                    success: function (data) {
                        itemComponentModels[slot].models = [{
                            fileName: data.FileName,
                            fileId: data.Id,
                            gender: 3,
                            race: 0,
                            class: 0,
                            extraData: inventorySlot === window.WH.Wow.Item.INVENTORY_TYPE_SHOULDERS ? i : -1
                        }]
                    }
                });
                promises.push(promise);
            }
            return promises;
        }

        function randomizeComponentTexture(slot) {
            const promise = $.ajax({
                method: "GET",
                url: "/Data/RandomTextureFile",
                success: function (data) {
                    itemComponentModels[slot].texture = {
                        name: data.FileName,
                        id: data.Id
                    }
                }
            });
            return [promise];
        }

        function reloadTexturesComponents() {
            $("#ci_texture_componentsection").empty();

            let inventorySlot = parseInt($("#ci_inventoryslot").val(), 10);

            let opts = getComponentSectionsForInventoryType(inventorySlot);
            // opts = opts.filter((x) => textures.findIndex((y) => y.section === x) === -1);
            for (const opt of opts) {
                $("#ci_texture_componentsection").append($("<option value='" + opt + "'>" + WH.Wow.ComponentSections[opt] + "</option>"))
            }

            $("#ci_texture_textureFile").val("");
            $("#ci_texture_fileId").val("")
            $("#ci_texture_gender").val("3");
            $("#ci_texture_race").val("0");
            $("#ci_texture_class").val("0");
            $("#addTextureBtn").attr('disabled', true);

            $("#texturesSection .accordion-body").empty();

            for (const sectionStr in itemMaterials) {
                const textures = itemMaterials[sectionStr];
                const section = parseInt(sectionStr, 10);
                for (let i = 0; i < textures.length; i++) {
                    const texture = textures[i];
                    const formGroup = $("<div class='form-group mb-3' />");
                    let label = WH.Wow.ComponentSections[section];
                    if (texture.gender !== 3) {
                        label += " - " + (texture.gender === 0 ? "Male" : "Female")
                    }
                    if (texture.race !== 0) {
                        label += " - " + getRaceName(texture.race);
                    }
                    if (texture.class !== 0) {
                        label += " - " + getClassName(texture.class);
                    }
                    formGroup.append($("<label for='ci_texture_" + section + "_" + i + "' class='form-label'>" + label + "</label>"));
                    const inputGroup = $("<div class='input-group' />");
                    const input = $("<input id='ci_texture_" + section + "_" + i + "' class='form-control' readonly type='text' />");
                    input.val(texture.fileName);
                    inputGroup.append(input);
                    const removeButton = $("<button type='button' class='btn btn-outline-danger'>Remove</button>")
                    removeButton.on("click", function () {
                        itemMaterials[section].splice(itemMaterials[section].indexOf(texture), 1);
                        reloadTexturesComponents();
                        previewCustomItem();
                    });
                    inputGroup.append(removeButton)
                    formGroup.append(inputGroup);
                    $("#texturesSection .accordion-body").append(formGroup);
                }
            }

            if (opts.length > 0) {
                $("#texturesSection .accordion-body")
                    .append($("<button type='button' class='btn btn-dark me-3' data-bs-toggle='modal' data-bs-target='#addTextureModal'>Add Textures</button>"));
                const randomizeButton = $("<button type='button' class='btn btn-secondary me-3'>Randomize</button>")
                randomizeButton.on("click", onRandomizeTextures);
                $("#texturesSection .accordion-body")
                    .append(randomizeButton);

            } else {
                $("#texturesSection .accordion-body")
                    .append($("<p class='text-muted'>Textured geosets are unavailable for this inventory type. Please use components instead.</p>"));
            }

        }

        function reloadParticleColorComponents() {
            $("#particleColorSection .accordion-body").empty();

            if (particleColors.length > 0) {
                // Set modal colors
                for (let i = 1; i < 4; i++) {
                    for (let j = 1; j < 4; j++) {
                        const [b, g, r, a] = intToByteArray(particleColors[i - 1][j - 1]);
                        const hexStr = "#" + byteToHexCode(r) + byteToHexCode(g) + byteToHexCode(b);
                        $("#ci_particle_color" + i + "_" + j).val(hexStr);
                        $("#ci_particle_alpha" + i + "_" + j).val((a / 255).toFixed(2));
                    }
                }

                const table = $("<table class='table'>");
                table.append("<thead><tr><th>#<th>Start</th><th>Mid</th><th>End</th></tr></thead>")
                const tbody = $("<tbody>");
                for (let i = 0; i < particleColors.length; i++) {
                    const colorData = particleColors[i];
                    const row = $("<tr>");
                    row.append($("<td>" + (i + 1) + "</td>"));
                    for (const color of colorData) {
                        row.append($("<td><div class='me-2' style='width:50px; height:50px; display: inline-block;background-color: " + getColorStringFromNumber(color) + "'></div></td>"))
                    }
                    tbody.append(row);
                }
                table.append(tbody);
                $("#particleColorSection .accordion-body").append(table);
                const removeButton = $("<button class='btn btn-outline-danger'>Clear Particle Color Override</button>");
                removeButton.on("click", function () {
                    particleColors = [];
                    reloadParticleColorComponents();
                    previewCustomItem();
                })

                const buttons = $("<div class='d-flex justify-content-between'>");
                buttons.append($("<button class='btn btn-dark' data-bs-toggle='modal' data-bs-target='#setParticleOverrideModal'>Edit Particle Colors</button>"));
                buttons.append(removeButton);
                $("#particleColorSection .accordion-body").append(buttons)

            } else {
                for (let i = 1; i < 4; i++) {
                    for (let j = 1; j < 4; j++) {
                        $("#ci_particle_color" + i + "_" + j).val("#000000");
                        $("#ci_particle_alpha" + i + "_" + j).val("1");
                    }
                }
                $("#particleColorSection .accordion-body")
                    .append($("<button class='btn btn-dark' data-bs-toggle='modal' data-bs-target='#setParticleOverrideModal'>Set Particle Colors</button>"));
            }
        }

        function reloadComponentModelsComponents() {
            let inventorySlot = parseInt($("#ci_inventoryslot").val(), 10);

            $("#ci_componenttexture_file").val("");
            $("#ci_componenttexture_fileId").val("")
            $("#ci_componentmodel_modelfile").val("");
            $("#ci_componentmodel_fileId").val("")
            $("#ci_componentmodel_gender").val("3");
            $("#ci_componentmodel_race").val("0");
            $("#ci_componentmodel_class").val("0");
            $("#ci_componentmodel_extradata").val("-1");
            $("#addComponentModelBtn").attr('disabled', true);
            $("#addComponentTextureBtn").attr('disabled', true);

            $("#component1ModelsSection .accordion-body").empty();
            $("#component2ModelsSection .accordion-body").empty();
            $("#component1TexturesSection .accordion-body").empty();
            $("#component2TexturesSection .accordion-body").empty();

            for (const idStr in itemComponentModels) {
                const data = itemComponentModels[idStr];
                const id = +idStr + 1;

                // Set Texture Content for Component
                if (data.texture.id > 0) {
                    const formGroup = $("<div class='form-group mb-3' />");
                    formGroup.append($("<label for='ci_componentModelTexture_" + id + "' class='form-label'>Texture File</label>"));
                    const inputGroup = $("<div class='input-group' />");
                    const input = $("<input id='ci_componentModelTexture_" + id + "' class='form-control' readonly type='text' />");
                    input.val(data.texture.name);
                    inputGroup.append(input);
                    const removeButton = $("<button type='button' class='btn btn-outline-danger'>Remove</button>")
                    removeButton.on("click", function () {
                        itemComponentModels[idStr].texture = {
                            id: -1,
                            name: ""
                        };
                        reloadComponentModelsComponents();
                        previewCustomItem();
                    });
                    inputGroup.append(removeButton)
                    formGroup.append(inputGroup);
                    $("#component" + id + "TexturesSection .accordion-body").append(formGroup)
                } else {
                    const button = $("<button id='component" + id + "AddTextureBtn' class='btn btn-dark me-3' data-bs-toggle='modal' data-bs-target='#addComponentTextureModal'>Add Texture</button>")
                    button.on("click", function () {
                        $("#ci_component_id").val(idStr);
                    })
                    $("#component" + id + "TexturesSection .accordion-body").append(button)
                }
                const randomizeButton1 = $("<button type='button' class='btn btn-secondary me-3'>Randomize</button>");
                randomizeButton1.on("click", idStr === "0" ? onRandomizeComponent1Texture : onRandomizeComponent2Texture);
                $("#component" + id + "TexturesSection .accordion-body").append(randomizeButton1);

                // Set Model Files Content for component

                for (let i = 0; i < data.models.length; i++) {
                    const model = data.models[i];
                    const formGroup = $("<div class='form-group mb-3' />");
                    let label = "Male & Female"
                    if (model.gender !== 3) {
                        label = (model.gender === 0 ? "Male" : "Female")
                    }
                    if (model.extraData !== -1) {
                        label += " - " + (model.extraData === 0 ? "Left Shoulderpad" : "Right Shoulderpad")
                    }
                    if (model.race !== 0) {
                        label += " - " + getRaceName(model.race);
                    }
                    if (model.class !== 0) {
                        label += " - " + getClassName(model.class);
                    }
                    formGroup.append($("<label for='ci_componentModel" + id + "_" + i + "' class='form-label'>" + label + "</label>"));
                    const inputGroup = $("<div class='input-group' />");
                    const input = $("<input id='ci_componentModel" + id + "_" + i + "' class='form-control' readonly type='text' />");
                    input.val(model.fileName);
                    inputGroup.append(input);
                    const removeButton = $("<button type='button' class='btn btn-outline-danger'>Remove</button>")
                    removeButton.on("click", function () {
                        itemComponentModels[idStr].models.splice(i, 1);
                        reloadComponentModelsComponents();
                        previewCustomItem();
                    });
                    inputGroup.append(removeButton)
                    formGroup.append(inputGroup);

                    $("#component" + id + "ModelsSection .accordion-body").append(formGroup);
                }

                const button = $("<button type='button' class='btn btn-dark' data-bs-toggle='modal' data-bs-target='#addComponentModelModal'>Add Model</button>");
                button.on("click", function () {
                    $("#ci_component_id").val(idStr);
                });
                $("#component" + id + "ModelsSection .accordion-body").append(button)
                const randomizeButton2 = $("<button type='button' class='btn btn-secondary me-3'>Randomize</button>");
                randomizeButton2.on("click", idStr === "0" ? onRandomizeComponent1Model : onRandomizeComponent2Model);
                $("#component" + id + "ModelsSection .accordion-body").append(randomizeButton2);
            }
        }

        function reloadFlagsComponents() {
            $("#flagsSection .accordion-body").empty();
            for (const flag in WH.Wow.ItemFeatureFlags) {
                const flagId = parseInt(flag, 10);
                const elem = $("<div class='form-check'>");
                const checkbox = $("<input class='form-check-input' type='checkbox' id='cb_flag_" + flag + "' />");
                if ((flags & flagId) > 0) {
                    checkbox.attr('checked', true);
                }
                checkbox.on('click', function () {
                    if ((flags & flagId) > 0) {
                        flags -= flagId;
                    } else {
                        flags += flagId;
                    }
                    previewCustomItem();
                })
                elem.append(checkbox);
                elem.append("<label class='form-check-label' for='id='cb_flag_" + flag + "'>" + WH.Wow.ItemFeatureFlags[flag] + "</label>");
                $("#flagsSection .accordion-body").append(elem);
            }
        }

        function reloadHelmetGeovisComponents() {
            $("#ci_helmetgeovis_geosetgroup").empty();

            for (const geosetId in WH.Wow.GeoSets) {
                $("#ci_helmetgeovis_geosetgroup").append($("<option value='" + geosetId + "'>" + WH.Wow.GeoSets[geosetId].title + "</option>"))
            }

            $("#ci_helmetgeovis_geosetgroup").val("0");
            $("#ci_helmetgeovis_race").val("1");
            $("#ci_helmetgeovis_gender").val("");

            $("#geoSetOverrideSection1 .accordion-body").empty();
            $("#geoSetOverrideSection2 .accordion-body").empty();

            for (let i = 0; i < helmetGeoVisMale.length; i++) {
                const gsOverride = helmetGeoVisMale[i];
                const formGroup = $("<div class='form-group mb-3' />");
                let label = WH.Wow.GeoSets[gsOverride.group].title;
                label += " - " + getRaceName(gsOverride.race);
                formGroup.append($("<label for='ci_gsOverride_m_" + i + "' class='form-label'>" + label + "</label>"));
                const inputGroup = $("<div class='input-group' />");
                const input = $("<input id='ci_gsOverride_m_" + i + "' class='form-control' readonly type='text' />");
                input.val("Disabled");
                inputGroup.append(input);
                const removeButton = $("<button type='button' class='btn btn-outline-danger'>Remove</button>")
                removeButton.on("click", function () {
                    helmetGeoVisMale.splice(i, 1);
                    reloadHelmetGeovisComponents();
                    previewCustomItem();
                });
                inputGroup.append(removeButton)
                formGroup.append(inputGroup);
                $("#geoSetOverrideSection1 .accordion-body").append(formGroup);
            }
            const buttonM = $("<button id='addGsOverrideM' class='btn btn-dark' data-bs-toggle='modal' data-bs-target='#addGeosetOverrideModal'>Add Geoset Override</button>");
            buttonM.on("click", function () {
                $("#ci_helmetgeovis_gender").val("0");
            })
            $("#geoSetOverrideSection1 .accordion-body").append(buttonM);

            for (let i = 0; i < helmetGeoVisFemale.length; i++) {
                const gsOverride = helmetGeoVisFemale[i];
                const formGroup = $("<div class='form-group mb-3' />");
                let label = WH.Wow.GeoSets[gsOverride.group].title;
                label += " - " + getRaceName(gsOverride.race);
                formGroup.append($("<label for='ci_gsOverride_m_" + i + "' class='form-label'>" + label + "</label>"));
                const inputGroup = $("<div class='input-group' />");
                const input = $("<input id='ci_gsOverride_m_" + i + "' class='form-control' readonly type='text' />");
                input.val("Disabled");
                inputGroup.append(input);
                const removeButton = $("<button type='button' class='btn btn-outline-danger'>Remove</button>")
                removeButton.on("click", function () {
                    helmetGeoVisFemale.splice(i, 1);
                    reloadHelmetGeovisComponents();
                    previewCustomItem();
                });
                inputGroup.append(removeButton)
                formGroup.append(inputGroup);
                $("#geoSetOverrideSection2 .accordion-body").append(formGroup);
            }
            const buttonF = $("<button id='addGsOverrideF' class='btn btn-dark' data-bs-toggle='modal' data-bs-target='#addGeosetOverrideModal'>Add Geoset Override</button>")
            buttonF.on("click", function () {
                $("#ci_helmetgeovis_gender").val("1");
            });
            $("#geoSetOverrideSection2 .accordion-body").append(buttonF);
        }

        async function reloadCharacterModel() {
            if (window.model) {
                window.model.destroy();
            }

            const fullCharOptions = await findRaceGenderOptions(character.race, character.gender);

            const options = [];
            for (const opt of fullCharOptions.Options) {
                const i = character.customizations.findIndex((x) => x.optionId === opt.Id);
                if (i > -1) {
                    options.push(character.customizations[i]);
                } else {
                    options.push({
                        optionId: opt.Id,
                        choiceId: opt.Choices[0].Id
                    })
                }
            }

            const modelData = {
                type: 2,
                contentPath: window.CONTENT_PATH,
                container: $("#model_3d"),
                aspect: 1,
                hd: true,
                items: [],
                charCustomization: {
                    options
                },
                models: {
                    id: character.race * 2 - 1 + character.gender,
                    type: 16
                }
            }
            const wowModelViewer = await new WowModelViewer(modelData);
            window.model = wowModelViewer;
            previewCustomItem();
        }

        function loadAvailableCharacters() {
            $.ajax({
                url: "/Character/ListCharacters",
                method: "GET",
                success: function (data) {
                    $("#ci_character_select").empty();
                    characters = data;
                    for (let i = 0; i < characters.length; i++) {
                        $("#ci_character_select").append($("<option value='" + i + "'>" + characters[i].Name + "</option>"))
                    }
                }
            });
        }

        function loadItem() {
            let inventoryType = parseInt($("#ci_item_inventoryType").val(), 10);
            let displayId = parseInt($("#ci_item_displayId").val(), 10)

            $.LoadingOverlay("show");

            $.ajax({
                url: "/modelviewer/live/meta/armor/" + inventoryType + "/" + displayId + ".json",
                method: "GET",
                error: function () {
                    $.LoadingOverlay("hide");
                },
                success: function (data) {
                    $("#ci_inventoryslot").val(inventoryType);
                    onInventorySlotChange();

                    let promises = [];
                    // Load geosetdata
                    const sets = getGeoSetsForInventoryType(inventoryType);
                    for (let i = 0; i < sets.length; i++) {
                        $("#ci_geoset_" + sets[i]).val(data.Item.GeosetGroup[i]);
                    }

                    // Load textures
                    itemMaterials = {};
                    for (const section in data.ComponentTextures) {
                        for (const texture of data.TextureFiles[data.ComponentTextures[section]])
                            promises.push($.ajax({
                                url: "/Data/TextureFiles?search=" + texture.FileDataId,
                                method: "GET",
                                success: function (data) {
                                    const textureData = {
                                        fileName: data[0].FileName,
                                        fileId: data[0].Id,
                                        race: texture.Race,
                                        class: texture.Class,
                                        gender: texture.Gender
                                    }
                                    if (itemMaterials[section]) {
                                        itemMaterials[section].push(textureData);
                                    } else {
                                        itemMaterials[section] = [textureData];
                                    }
                                    reloadTexturesComponents();
                                }
                            }));
                    }
                    reloadTexturesComponents();


                    //  Load component data
                    itemComponentModels = {
                        "0": {
                            texture: {
                                id: -1,
                                name: ""
                            },
                            models: []
                        },
                        "1": {
                            texture: {
                                id: -1,
                                name: ""
                            },
                            models: []
                        }
                    };
                    for (const componentId in data.ComponentModels) {
                        const models = data.ModelFiles[data.ComponentModels[componentId]];
                        for (const modelData of models) {
                            promises.push($.ajax({
                                url: "/Data/ComponentModels?search=" + modelData.FileDataId,
                                method: "GET",
                                success: function (data) {
                                    const model = {
                                        fileName: data[0].FileName,
                                        fileId: data[0].Id,
                                        race: modelData.Race,
                                        class: modelData.Class,
                                        gender: modelData.Gender,
                                        extraData: modelData.ExtraData
                                    }
                                    itemComponentModels[componentId].models.push(model);
                                    reloadComponentModelsComponents();
                                }
                            }));
                        }
                        let textureId = (componentId === "0") ? data.Textures["2"] : data.Textures2["2"];
                        promises.push($.ajax({
                            url: "/Data/TextureFiles?search=" + textureId,
                            method: "GET",
                            success: function (data) {
                                const textureData = {
                                    name: data[0].FileName,
                                    id: data[0].Id
                                }
                                itemComponentModels[componentId].texture = textureData;
                                reloadComponentModelsComponents();
                            }
                        }));
                    }

                    reloadComponentModelsComponents();

                    // Load particle color data
                    particleColors = [];
                    if (data.Item.ParticleColor !== null) {
                        particleColors.push([data.Item.ParticleColor.Start[0], data.Item.ParticleColor.Mid[0], data.Item.ParticleColor.End[0]])
                        particleColors.push([data.Item.ParticleColor.Start[1], data.Item.ParticleColor.Mid[1], data.Item.ParticleColor.End[1]])
                        particleColors.push([data.Item.ParticleColor.Start[2], data.Item.ParticleColor.Mid[2], data.Item.ParticleColor.End[2]])
                    }
                    reloadParticleColorComponents();

                    // Load flags
                    flags = data.Item.Flags;
                    reloadFlagsComponents();

                    // Load helmet geoset overrides
                    helmetGeoVisMale = [];
                    helmetGeoVisFemale = [];
                    if (data.Item.HideGeosetMale !== null) {
                        helmetGeoVisMale = data.Item.HideGeosetMale.map(
                            x => ({ race: x.RaceId, group: x.GeosetGroup })
                        )
                    }
                    if (data.Item.HideGeosetFemale !== null) {
                        helmetGeoVisFemale = data.Item.HideGeosetFemale.map(
                            x => ({ race: x.RaceId, group: x.GeosetGroup })
                        )
                    }
                    reloadHelmetGeovisComponents();

                    // Await loading all data:
                    Promise.all(promises).then(() => {
                        $.LoadingOverlay("hide");
                        previewCustomItem();
                    })
                }
            })
            $("#ci_item_search").val("");
            $("#ci_item_displayId").val("");
            $("#ci_item_inventoryType").val("");
            $("#loadItemBtn").attr('disabled', true);
        }

        function loadFile() {
            const fileInput = document.createElement("input");
            fileInput.type = "file";
            // document.append(fileInput);
            fileInput.onchange = function () {
                const file = fileInput.files[0];
                const reader = new FileReader();
                reader.addEventListener("load", () => {
                    try {
                        const data = JSON.parse(reader.result);
                        $("#ci_inventoryslot").val(data.inventoryType);
                        onInventorySlotChange();

                        itemMaterials = data.itemMaterials;
                        itemComponentModels = data.itemComponentModels;
                        particleColors = data.particleColors;
                        helmetGeoVisMale = data.helmetGeoVisMale;
                        helmetGeoVisFemale = data.helmetGeoVisFemale;
                        flags = data.flags;

                        const sets = getGeoSetsForInventoryType(data.inventoryType);
                        for (let i = 0; i < sets.length; i++) {
                            $("#ci_geoset_" + sets[i]).val(data.geoSetGroup[i])
                        }
                        reloadTexturesComponents();
                        reloadComponentModelsComponents();
                        reloadFlagsComponents();
                        reloadParticleColorComponents();
                        reloadHelmetGeovisComponents();
                        previewCustomItem();

                        $.LoadingOverlay("hide");
                    } catch {
                        $("#alertError").text("Could not load data from file.").show();
                        $.LoadingOverlay("hide");
                    }
                    // document.removeChild(fileInput);
                }, false);
                if (file) {
                    reader.readAsText(file);
                    $.LoadingOverlay("show");
                }
            }
            fileInput.click();
        }

        function previewCustomItem() {
            let inventorySlot = parseInt($("#ci_inventoryslot").val(), 10);
            WH.debug("Creating custom item for inventory slot: ", inventorySlot);
            const data = {
                "Model": 0,
                "Textures": null,
                "Textures2": null,
                "TextureFiles": {

                },
                "ModelFiles": {

                },
                "Item": {
                    "Flags": flags,
                    "InventoryType": inventorySlot,
                    "ItemClass": 4,
                    "ItemSubClass": 5,
                    "HideGeosetMale": null,
                    "HideGeosetFemale": null,
                    "GeosetGroup": [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    "AttachGeosetGroup": [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    "GeosetGroupOverride": 0,
                    "ParticleColor": null
                },
                "Creature": null,
                "Character": null,
                "ItemEffects": null,
                "Equipment": null,
                "ComponentTextures": {
                },
                "ComponentModels": {
                },
                "StateKit": null,
                "StateKits": null,
                "Scale": 1.0
            }

            // Set Geoset data
            const sets = getGeoSetsForInventoryType(inventorySlot);
            for (let i = 0; i < sets.length; i++) {
                data.Item.GeosetGroup[i] = parseInt($("#ci_geoset_" + sets[i]).val(), 10);
            }

            // Set Textures
            for (const sectionStr in itemMaterials) {
                const textures = itemMaterials[sectionStr]
                const section = parseInt(sectionStr, 10);
                data.TextureFiles[sectionStr] = textures.map((x) => ({
                    "FileDataId": x.fileId,
                    "Gender": x.gender,
                    "Race": x.race,
                    "Class": x.class,
                    "ExtraData": 0
                }));
                data.ComponentTextures[section] = sectionStr;
            }


            // Set Item Components
            for (const idStr in itemComponentModels) {
                if (itemComponentModels[idStr].models.length) {
                    data.ComponentModels[idStr] = +idStr + 1;
                    data.ModelFiles[+idStr + 1] = itemComponentModels[idStr].models
                        .map(x => ({
                            "FileDataId": x.fileId,
                            "Gender": x.gender,
                            "Class": x.class,
                            "Race": x.race,
                            "ExtraData": x.extraData
                        }));
                }
                if (itemComponentModels[idStr].texture.id > 0) {
                    const textureData = {
                        "2": itemComponentModels[idStr].texture.id
                    }
                    if (idStr == "0") {
                        data.Textures = textureData;
                    } else {
                        data.Textures2 = textureData;
                    }
                }
            }

            // Set Particle Color Override
            if (particleColors.length > 0) {
                data.Item.ParticleColor = {
                    Id: 1234,
                    Start: [],
                    Mid: [],
                    End: []
                }
                for (let i = 0; i < particleColors.length; i++) {
                    data.Item.ParticleColor.Start[i] = particleColors[i][0];
                    data.Item.ParticleColor.Mid[i] = particleColors[i][1];
                    data.Item.ParticleColor.End[i] = particleColors[i][2];
                }
            }

            // Set Geovis overrides
            if (inventorySlot === WH.Wow.Item.INVENTORY_TYPE_HEAD && helmetGeoVisMale.length > 0) {
                data.Item.HideGeosetMale = helmetGeoVisMale.map(
                    x => ({ RaceId: x.race, GeosetGroup: x.group })
                )
            }
            if (inventorySlot === WH.Wow.Item.INVENTORY_TYPE_HEAD && helmetGeoVisFemale.length > 0) {
                data.Item.HideGeosetFemale = helmetGeoVisFemale.map(
                    x => ({ RaceId: x.race, GeosetGroup: x.group })
                )
            }

            window.model.setCustomItem(inventorySlot, data);
        }

        function exportToFile() {
            var a = document.createElement("a");
            const inventoryType = parseInt($("#ci_inventoryslot").val(), 10);
            const data = {
                inventoryType,
                itemMaterials,
                itemComponentModels,
                particleColors,
                helmetGeoVisMale,
                helmetGeoVisFemale,
                flags,
                geoSetGroup: [0, 0, 0, 0, 0]
            }

            const sets = getGeoSetsForInventoryType(inventoryType);
            for (let i = 0; i < sets.length; i++) {
                data.geoSetGroup[i] = parseInt($("#ci_geoset_" + sets[i]).val(), 10);
            }

            var file = new Blob([JSON.stringify(data)], { type: "application/json" });
            a.href = URL.createObjectURL(file);
            a.download = "myCustomItem.json";
            a.click();
        }

        $(document).ready(function () {
            $.LoadingOverlaySetup({
                background: "rgba(190,190,190, 0.8)"
            });

            $("#previewBtn").on("click", previewCustomItem);

            $("#ci_inventoryslot").on("change", onInventorySlotChange);
            onInventorySlotChange();

            $("#ci_texture_textureFile").on("keyup", debounce(onSearchTexture));
            $("#addTextureBtn").on("click", onAddTexture);

            $("#ci_item_search").on("keyup", debounce(onSearchItem));
            $("#loadItemBtn").on("click", loadItem);

            $("#component1AddModelBtn").on("click", function () {
                $("#ci_component_id").val("0")
            });
            $("#component1AddTextureBtn").on("click", function () {
                $("#ci_component_id").val("0")
            });
            $("#component2AddModelBtn").on("click", function () {
                $("#ci_component_id").val("1")
            });
            $("#component2AddTextureBtn").on("click", function () {
                $("#ci_component_id").val("1")
            });

            $("#ci_componenttexture_file").on("keyup", debounce(onSearchComponentTexture));
            $("#ci_componentmodel_modelfile").on("keyup", debounce(onSearchComponentModel));

            $("#addComponentTextureBtn").on("click", onAddComponentTexture);
            $("#addComponentModelBtn").on("click", onAddComponentModel);

            $("#setParticleOverride").on("click", onSetParticleColors);

            $("#addHelmetGeoVis").on("click", onAddGeoSetOverride);

            $("#exportBtn").on("click", exportToFile);
            $("#loadFileBtn").on("click", loadFile);

            $("#ci_model_gender").on("change", onModelGenderChange)
            $("#ci_model_race").on("change", onModelRaceChange)
            $("#loadCharacterBtn").on("click", onLoadCharacter);

            $("#ci_model_gender").val(character.gender);
            $("#ci_model_race").val(character.race);

            $("#randomizeItemBtn").on("click", onRandomizeItem)

            $("#component1RandomizeModelBtn").on("click", onRandomizeComponent1Model);
            $("#component2RandomizeModelBtn").on("click", onRandomizeComponent2Model);
            $("#component1RandomizeTextureBtn").on("click", onRandomizeComponent1Texture);
            $("#component2RandomizeTextureBtn").on("click", onRandomizeComponent2Texture);

            reloadFlagsComponents();
            reloadHelmetGeovisComponents();
            loadAvailableCharacters();
            reloadCharacterModel();
        })
    </script>
}
